components:
    examples: {}
    headers: {}
    parameters: {}
    requestBodies: {}
    responses: {}
    schemas:
        ItemStatus:
            type: string
            enum:
                - Queued
            nullable: false
        LocationProps:
            properties:
                positions:
                    properties:
                        begin:
                            properties:
                                line:
                                    type: number
                                    format: double
                            required:
                                - line
                            type: object
                    required:
                        - begin
                    type: object
                path:
                    type: string
            required:
                - positions
                - path
            type: object
        Severity:
            type: string
            enum:
                - HIGH
            nullable: false
        MetadataProps:
            properties:
                severity:
                    $ref: '#/components/schemas/Severity'
                description:
                    type: string
            required:
                - severity
                - description
            type: object
        Finding:
            properties:
                metadata:
                    $ref: '#/components/schemas/MetadataProps'
                location:
                    $ref: '#/components/schemas/LocationProps'
                ruleId:
                    type: string
                type:
                    type: string
                itemId:
                    type: string
                id:
                    type: string
            required:
                - metadata
                - location
                - ruleId
                - type
                - itemId
                - id
            type: object
        ItemProps:
            properties:
                finishedAt:
                    type: string
                scanningAt:
                    type: string
                queuedAt:
                    type: string
                findings:
                    items:
                        $ref: '#/components/schemas/Finding'
                    type: array
                repositoryName:
                    type: string
                status:
                    $ref: '#/components/schemas/ItemStatus'
                id:
                    type: string
            required:
                - queuedAt
                - findings
                - repositoryName
                - status
                - id
            type: object
        Pick_ItemProps.Exclude_keyofItemProps.id-or-findings__:
            properties:
                status:
                    $ref: '#/components/schemas/ItemStatus'
                repositoryName:
                    type: string
                queuedAt:
                    type: string
                scanningAt:
                    type: string
                finishedAt:
                    type: string
            required:
                - status
                - repositoryName
                - queuedAt
            type: object
            description: 'From T, pick a set of properties whose keys are in the union K'
        Omit_ItemProps.id-or-findings_:
            $ref: '#/components/schemas/Pick_ItemProps.Exclude_keyofItemProps.id-or-findings__'
            description: 'Construct a type with the properties of T except for those in type K.'
        Pick_Finding.Exclude_keyofFinding.id__:
            properties:
                itemId:
                    type: string
                type:
                    type: string
                ruleId:
                    type: string
                location:
                    $ref: '#/components/schemas/LocationProps'
                metadata:
                    $ref: '#/components/schemas/MetadataProps'
            required:
                - itemId
                - type
                - ruleId
                - location
                - metadata
            type: object
            description: 'From T, pick a set of properties whose keys are in the union K'
        Omit_Finding.id_:
            $ref: '#/components/schemas/Pick_Finding.Exclude_keyofFinding.id__'
            description: 'Construct a type with the properties of T except for those in type K.'
        FindingCreationParams:
            $ref: '#/components/schemas/Omit_Finding.id_'
        ItemCreationParams:
            allOf:
                -
                    $ref: '#/components/schemas/Omit_ItemProps.id-or-findings_'
                -
                    properties:
                        findings:
                            items:
                                $ref: '#/components/schemas/FindingCreationParams'
                            type: array
                    required:
                        - findings
                    type: object
    securitySchemes: {}
info:
    title: items-service
    version: 1.0.0
    license:
        name: ISC
    contact: {}
openapi: 3.0.0
paths:
    /healthcheck:
        get:
            operationId: HealthCheck
            responses:
                '200':
                    description: Ok
                    content:
                        application/json:
                            schema:
                                properties:
                                    status: {type: string}
                                required:
                                    - status
                                type: object
            security: []
            parameters: []
    /api/v1/items:
        get:
            operationId: GetItems
            responses:
                '200':
                    description: Ok
                    content:
                        application/json:
                            schema:
                                properties:
                                    data: {items: {$ref: '#/components/schemas/ItemProps'}, type: array}
                                required:
                                    - data
                                type: object
            security: []
            parameters: []
    '/api/v1/items/{itemId}':
        get:
            operationId: GetItem
            responses:
                '200':
                    description: Ok
                    content:
                        application/json:
                            schema:
                                properties:
                                    data: {$ref: '#/components/schemas/ItemProps'}
                                required:
                                    - data
                                type: object
            security: []
            parameters:
                -
                    in: path
                    name: itemId
                    required: true
                    schema:
                        type: string
    /api/v1/item:
        post:
            operationId: CreateItem
            responses:
                '201':
                    description: Created
                    content:
                        application/json:
                            schema:
                                properties:
                                    data: {$ref: '#/components/schemas/ItemProps'}
                                required:
                                    - data
                                type: object
            security: []
            parameters: []
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/ItemCreationParams'
servers:
    -
        url: /
